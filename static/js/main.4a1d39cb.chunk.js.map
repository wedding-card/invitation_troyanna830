{"version":3,"sources":["images/main.jpg","components/commons/WeddingDate.js","components/commons/LinkBox.js","components/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","S","WeddingDateWrapper","styled","div","Month","Slash","Day","WeddingDate","month","day","LinkWrapper","color","LinkWrapperShadow","Title","Message","LinkBox","title","message","link","titleColor","messageColor","onClick","window","open","MainWrapper","DateWrapper","Name","ImageWrapper","LinkBoxWrapper","Main","src","MainImage","width","height","Wrapper","Content","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"oHAAAA,EAAOC,QAAU,IAA0B,kC,srBCG3C,IAAMC,EAAI,GACVA,EAAEC,mBAAqBC,IAAOC,IAA9B,KASAH,EAAEI,MAAQF,IAAOC,IAAjB,KAIAH,EAAEK,MAAQH,IAAOC,IAAjB,KAIAH,EAAEM,IAAMJ,IAAOC,IAAf,KAaeI,MAVf,YAAsC,IAAfC,EAAc,EAAdA,MAAOC,EAAO,EAAPA,IAC5B,OACE,kBAACT,EAAEC,mBAAH,KACE,kBAACD,EAAEI,MAAH,KAAUI,GACV,kBAACR,EAAEK,MAAH,UACA,kBAACL,EAAEM,IAAH,KAAQG,K,2zBC1Bd,IAAMT,EAAI,GACVA,EAAEU,YAAcR,IAAOC,IAAvB,KAIsB,qBAAEQ,SASxBX,EAAEY,kBAAoBV,IAAOC,IAA7B,KAMsB,qBAAEQ,SAGxBX,EAAEa,MAAQX,IAAOC,IAAjB,KACW,qBAAEQ,SAIbX,EAAEc,QAAUZ,IAAOC,IAAnB,KACW,qBAAEQ,SAUb,IAYeI,EAZC,SAAC,GAAsD,IAArDC,EAAoD,EAApDA,MAAOC,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,WAAYC,EAAkB,EAAlBA,aAClD,OACE,oCACE,kBAAC,EAAEV,YAAH,CAAeC,MAAOS,EAAcC,QAAS,kBAPnD,SAAcH,GACZI,OAAOC,KAAKL,GAM2CK,CAAKL,KACtD,kBAAC,EAAEL,MAAH,CAASF,MAAOQ,GAAaH,GAC7B,kBAAC,EAAEF,QAAH,CAAWH,MAAOS,GAAeH,IAEnC,kBAAC,EAAEL,kBAAH,CAAqBD,MAAOS,M,47BC3ClC,IAAMpB,EAAI,GACVA,EAAEwB,YAActB,IAAOC,IAAvB,KASAH,EAAEyB,YAAcvB,IAAOC,IAAvB,KAIAH,EAAE0B,KAAOxB,IAAOC,IAAhB,KAOAH,EAAEc,QAAUZ,IAAOC,IAAnB,KAOAH,EAAE2B,aAAezB,IAAOC,IAAxB,KAMAH,EAAE4B,eAAiB1B,IAAOC,IAA1B,KA8Ce0B,MAnCf,WAKE,OACE,kBAAC,EAAEL,YAAH,KACE,kBAAC,EAAD,CAAahB,MAAO,KAAMC,IAAK,OAC/B,kBAAC,EAAEiB,KAAH,KAPU,qBAOV,WANU,sBAOV,kBAAC,EAAEZ,QAAH,KANY,qFAOZ,kBAAC,EAAEa,aAAH,KACE,yBAAKG,IAAKC,IAAWC,MAAO,IAAKC,OAAQ,OAE3C,kBAAC,EAAEL,eAAH,KACE,kBAAC,EAAD,CACEZ,MAAO,oFACPC,QAAS,qIACTC,KAAM,4CACNC,WAAY,UACZC,aAAc,aAGlB,kBAAC,EAAEQ,eAAH,KACE,kBAAC,EAAD,CACEZ,MAAO,iGACPC,QAAS,yHACTC,KAAM,mDACNC,WAAY,UACZC,aAAc,e,+XC1ExB,IAAMpB,EAAI,GACVA,EAAEkC,QAAUhC,IAAOC,IAAnB,KAUAH,EAAEmC,QAAUjC,IAAOC,IAAnB,KAiBeiC,MAVf,WACE,OACE,kBAAC,EAAEF,QAAH,KACE,kBAAC,EAAEC,QAAH,KACE,kBAAC,EAAD,SCfYE,QACW,cAA7Bf,OAAOgB,SAASC,UAEe,UAA7BjB,OAAOgB,SAASC,UAEhBjB,OAAOgB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMpC,c","file":"static/js/main.4a1d39cb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/main.3f07fcf3.jpg\";","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst S = {};\r\nS.WeddingDateWrapper = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  height: 53px;\r\n  font-family: 'Playfair Display', serif;\r\n  color: #585151;\r\n  justify-content: center;\r\n`;\r\n\r\nS.Month = styled.div`\r\n  font-size: 40px;\r\n  justify-content: flex-start;\r\n`;\r\nS.Slash = styled.div`\r\n  font-size: 20px;\r\n  padding: 13px 12px;\r\n`;\r\nS.Day = styled.div`\r\n  font-size: 40px;\r\n`;\r\nfunction WeddingDate({ month, day }) {\r\n  return (\r\n    <S.WeddingDateWrapper>\r\n      <S.Month>{month}</S.Month>\r\n      <S.Slash>/</S.Slash>\r\n      <S.Day>{day}</S.Day>\r\n    </S.WeddingDateWrapper>\r\n  );\r\n}\r\n\r\nexport default WeddingDate;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst S = {};\r\nS.LinkWrapper = styled.div`\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  border: 2px solid ${({color}) => color};\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: #f4f4f4;\r\n  z-index: 2;\r\n  cursor: pointer;\r\n`;\r\nS.LinkWrapperShadow = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  top: 5px;\r\n  left: 9px;\r\n  border: 2px solid ${({color}) => color};\r\n  z-index: 1;\r\n`;\r\nS.Title = styled.div`\r\n  color: ${({color}) => color};\r\n  font-size: 18px;\r\n  font-family: 'Black Han Sans', sans-serif;\r\n`;\r\nS.Message = styled.div`\r\n  color: ${({color}) => color};\r\n  font-size: 12px;\r\n  line-height: 18px;\r\n  margin-top: 4px;\r\n`;\r\n\r\nfunction open(link) {\r\n  window.open(link)\r\n}\r\n\r\nconst LinkBox = ({title, message, link, titleColor, messageColor}) => {\r\n  return (\r\n    <>\r\n      <S.LinkWrapper color={messageColor} onClick={() => open(link)}>\r\n        <S.Title color={titleColor}>{title}</S.Title>\r\n        <S.Message color={messageColor}>{message}</S.Message>\r\n      </S.LinkWrapper>\r\n      <S.LinkWrapperShadow color={messageColor}/>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LinkBox;\r\n","import React from 'react';\r\nimport WeddingDate from \"../commons/WeddingDate\";\r\nimport styled from 'styled-components';\r\nimport MainImage from '../../images/main.jpg';\r\nimport LinkBox from \"../commons/LinkBox\";\r\n\r\nconst S = {};\r\nS.MainWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding-top: 38px;\r\n  padding-bottom: 75px;\r\n`;\r\n\r\nS.DateWrapper = styled.div`\r\n  padding-top: 38px;\r\n`;\r\n\r\nS.Name = styled.div`\r\n  padding-top: 20px;\r\n  text-align: center;\r\n  font-size: 15px;\r\n  color: #585151;\r\n`;\r\n\r\nS.Message = styled.div`\r\n  font-size: 13px;\r\n  color: #9e9999;\r\n  padding-top: 10px;\r\n  text-align: center;\r\n`;\r\n\r\nS.ImageWrapper = styled.div`\r\n  padding-top: 26px;\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\nS.LinkBoxWrapper = styled.div`\r\n  position: relative;\r\n  width: 304px;\r\n  height: 76px;\r\n  margin-top: 32px;\r\n  \r\n  &:last-child {\r\n    margin-top: 25px;\r\n  }\r\n`;\r\n\r\nfunction Main() {\r\n  const groom = '최재근';\r\n  const bride = '김초록';\r\n  const message = '온라인 결혼식에 함께 해주세요';\r\n\r\n  return (\r\n    <S.MainWrapper>\r\n      <WeddingDate month={\"08\"} day={\"30\"}/>\r\n      <S.Name>{groom} ㆍ {bride}</S.Name>\r\n      <S.Message>{message}</S.Message>\r\n      <S.ImageWrapper>\r\n        <img src={MainImage} width={304} height={456} />\r\n      </S.ImageWrapper>\r\n      <S.LinkBoxWrapper>\r\n        <LinkBox\r\n          title={'온라인으로 결혼식 참석하기 →'}\r\n          message={'여기를 누르면 유튜브 라이브방송으로 이동합니다'}\r\n          link={'https://www.youtube.com/embed/MR-ISKJq-mE'}\r\n          titleColor={'#ff5372'}\r\n          messageColor={'#ff5372'}\r\n        />\r\n      </S.LinkBoxWrapper>\r\n      <S.LinkBoxWrapper>\r\n        <LinkBox\r\n          title={'예식장에 참석하는 분들은 여기로 →'}\r\n          message={'여기를 누르면 모바일 청첩장으로 이동합니다'}\r\n          link={'https://wedding-card.github.io/troyandanna_0830/'}\r\n          titleColor={'#585151'}\r\n          messageColor={'#9e9999'}\r\n        />\r\n      </S.LinkBoxWrapper>\r\n    </S.MainWrapper>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\n\nimport Main from \"./components/Main/Main\";\nimport styled from 'styled-components';\n\nconst S = {};\nS.Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  //justify-content: center;\n  align-items: center;\n  background-color: #f4f4f4;\n  width: 100vw;\n  height: 100%;\n`;\n\nS.Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n`;\n\nfunction App() {\n  return (\n    <S.Wrapper>\n      <S.Content>\n        <Main />\n      </S.Content>\n    </S.Wrapper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}